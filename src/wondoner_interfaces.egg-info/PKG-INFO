Metadata-Version: 2.4
Name: wondoner-interfaces
Version: 0.1.4
Summary: Interfaces and standard models for the Wondoner plugin system.
License: # Released under MIT License
        
        Copyright (c) 2024 Tom Boone.
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Typing :: Typed
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: test
Requires-Dist: pytest<9.0.0,>=7.0.0; extra == "test"
Requires-Dist: pytest-asyncio<0.24.0,>=0.18.0; extra == "test"
Dynamic: license-file

# Wondoner Interfaces

![PyPI - Version](https://img.shields.io/pypi/v/wondoner-interfaces) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

This package provides the core interfaces, abstract base classes, and standard data models required for building plugin integrations for the **Wondoner** task aggregator. It defines the contract that all source plugins (like for Jira, GitHub, Todoist, etc.) must adhere to.

This package is intended primarily for developers creating new plugins for Wondoner.

## Installation

```bash
pip install wondoner-interfaces
```

## Core Components

This package defines:

* `TaskSourceIntegration`: The abstract base class that all source plugins must inherit from. It defines methods for creating, reading, updating tasks, and handling change detection (polling/webhooks).
* `StandardTask`: A dataclass representing a task in a standardized format used within WonDoner. Plugins map source-specific data to this model.
* `Project`: A simple dataclass representing a project label within WonDoner.
* `TaskStatus`: An enum defining the standardized task statuses (`TaskStatus.DONE`, `TaskStatus.NOT_DONE`).

## Basic Plugin Usage

Plugin developers should inherit from TaskSourceIntegration and implement the required abstract methods:

```python
from typing import Dict, Any, Optional, AsyncGenerator

# Adjust the import based on your final package structure
from wondoner.interfaces import (
    TaskSourceIntegration,
    StandardTask,
    Project,
    TaskStatus
)

class MyCoolSourcePlugin(TaskSourceIntegration):
    # Unique identifier string for this source type
    SOURCE_NAME = "my_cool_source"

    def __init__(self, config: Dict[str, Any]):
        """Initialize with config (API keys, URLs, etc.)."""
        super().__init__(config)
        # Initialize your source-specific API client here
        # self.client = ...

    # --- Implement required abstract methods ---

    async def get_task(self, source_task_id: str) -> Optional[StandardTask]:
        # Fetch task from source API and map to StandardTask
        pass

    async def update_task(self, source_task_id: str, changes: Dict[str, Any]) -> StandardTask:
        # Update task in source API based on changes, return mapped StandardTask
        pass

    # --- Optionally override default change detection methods ---

    # async def poll_changes(self, last_sync_state: Optional[Any]) -> AsyncGenerator[StandardTask, None]:
    #     # Implement if your source requires polling
    #     pass

    # def parse_webhook_payload(self, payload: Dict[str, Any], headers: Dict[str, Any]) -> Optional[Dict[str, Any]]:
    #     # Implement if your source uses webhooks
    #     pass
```

Please refer to the source code within this package for detailed method signatures, docstrings, and model definitions.

## License
This project is licensed under the MIT License - see the LICENSE file for details.
